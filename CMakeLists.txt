#######################################################################################################################
# ___________________________________________________________________________________________________________________ #
# ___________________________________________/\/\______/\/\/\/\__/\/\______/\/\______________________________________ #
# _________________________________________/\/\/\/\______/\/\____/\/\/\__/\/\/\______________________________________ #
# _______________________________________/\/\____/\/\____/\/\____/\/\/\/\/\/\/\______________________________________ #
# _______________________________________/\/\/\/\/\/\____/\/\____/\/\__/\__/\/\______________________________________ #
# _______________________________________/\/\____/\/\__/\/\/\/\__/\/\______/\/\______________________________________ #
# ___________________________________________________________________________________________________________________ #
#                                                                                                                     #
#######################################################################################################################
# This is an AIM module. It is generated by aimcreate-pkg, one of the aimtools. It can be warped into multiple 
# middlewares by the RurBuilder. It can be run as a C++ module in the Node Javascript world, as a lightweight robotic
# software module, or on exciting new hardware such as a modern Android phone or a Raspberry PI. 
#
# The build systems uses CMake. All the automatically generated code falls under the Lesser General Public License 
# (LGPL GNU v3). The author can choose his/her own license for the code that is not automatically generated by the 
# AimTools and the RurBuilder.
#
# Author:	 Anne C. van Rossum (Distributed Organisms B.V.)
# Date: 	 Oct 28, 2013
#
# ASCII Art generated by: http://www.network-science.de/ascii/ with font "ticks".
#
# Copyright Â© 2013 Anne C. van Rossum <anne@dobots.nl>
#######################################################################################################################

CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

IF(COMMAND cmake_policy)
	cmake_policy(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

SET(TEST_COMPILERS CXX C)

# Set application shorthand
SET(APPLICATION_SHORTHAND "fitbit")

# Set name of project
SET(PROJECT_NAME ${APPLICATION_SHORTHAND} ${TEST_COMPILERS})

# Set the main file to use for this application
SET(MAIN_FILE "main_${APPLICATION_SHORTHAND}.cpp")

# Start a project
PROJECT(${PROJECT_NAME})

# The directory with some of the FindXXX modules
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
MESSAGE(STATUS "Search for FindX files in ${CMAKE_SOURCE_DIR}/cmake")

#######################################################################################################################
# Include your own FindX cmake files and options in the following file!
#######################################################################################################################

SET(CONFIGURATION_FILE "CMakeBuild.config")
IF(EXISTS ${CMAKE_SOURCE_DIR}/${CONFIGURATION_FILE})
	file(STRINGS ${CMAKE_SOURCE_DIR}/${CONFIGURATION_FILE} ConfigContents)
	foreach(NameAndValue ${ConfigContents})
		# Strip leading spaces
		string(REGEX REPLACE "^[ ]+" "" NameAndValue ${NameAndValue})
		# Find variable name
		string(REGEX MATCH "^[^=]+" Name ${NameAndValue})
		# Find the value
		string(REPLACE "${Name}=" "" Value ${NameAndValue})
		# Set the variable
		set(${Name} "${Value}")
	endforeach()
else()
	MESSAGE(FATAL_ERROR "Could not find file ${CONFIGURATION_FILE}, copy from ${CONFIGURATION_FILE}.default and adjust!")
endif()

#######################################################################################################################

MESSAGE(STATUS "Set application start address in linker script to ${APPLICATION_START_ADDRESS}")
CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/conf/nRF51822-softdevice.ld.in ${CMAKE_SOURCE_DIR}/conf/nRF51822-softdevice.ld)

# Libraries (math, stdc++ libraries, etc.)
SET(LIBS "-lsupc++ -lm -lc_s -lstdc++_s")

# Some debug information
MESSAGE(STATUS "\"${PROJECT_NAME}\" uses the following CXX flags: \"${CMAKE_CXX_FLAGS}\" (can be empty)")
MESSAGE(STATUS "Linked libraries: ${LIBS}")

# Source directory
SET(SOURCE_DIR "src")
SET(INCLUDE_DIR "include")

# Add a single 
LIST(APPEND FOLDER_SOURCE "${SOURCE_DIR}/Print.cpp")
LIST(APPEND FOLDER_SOURCE "${SOURCE_DIR}/error.cpp")
LIST(APPEND FOLDER_SOURCE "${SOURCE_DIR}/emergency.c")
LIST(APPEND FOLDER_SOURCE "${SOURCE_DIR}/Debug.cpp")
LIST(APPEND FOLDER_SOURCE "${SOURCE_DIR}/nRF51822.c")
LIST(APPEND FOLDER_SOURCE "${SOURCE_DIR}/Stream.cpp")
LIST(APPEND FOLDER_SOURCE "${SOURCE_DIR}/NRF51_SPI.cpp")
LIST(APPEND FOLDER_SOURCE "${SOURCE_DIR}/Arduino.cpp")
LIST(APPEND FOLDER_SOURCE "${SOURCE_DIR}/Pool.cpp")
LIST(APPEND FOLDER_SOURCE "${SOURCE_DIR}/syscalls.c")
LIST(APPEND FOLDER_SOURCE "${SOURCE_DIR}/nrf_pwm.c")
LIST(APPEND FOLDER_SOURCE "${SOURCE_DIR}/ble_error.cpp")
LIST(APPEND FOLDER_SOURCE "${SOURCE_DIR}/BluetoothLE.cpp")

LIST(APPEND FOLDER_SOURCE "${SOURCE_DIR}/${MAIN_FILE}")

# Add all header files without exception
FILE(GLOB FOLDER_HEADER ${INCLUDE_DIR}/*.h ${INCLUDE_DIR}/*.hh ${INCLUDE_DIR}/*.hpp)

LIST(APPEND FOLDER_SOURCE "${NRF51822_DIR}/Source/ble/ble_advdata.c")

# For Visual Studio group the files
SOURCE_GROUP("Source files" FILES ${FOLDER_SOURCE})
SOURCE_GROUP("Header files" FILES ${FOLDER_HEADER})

INCLUDE_DIRECTORIES(${INCLUDE_DIR})

# Add to the -I flags
INCLUDE_DIRECTORIES("${NRF51822_DIR}/Include")
INCLUDE_DIRECTORIES("${NRF51822_DIR}/Include/app_common")
INCLUDE_DIRECTORIES("${NRF51822_DIR}/Include/ble")
INCLUDE_DIRECTORIES("${NRF51822_DIR}/Include/ble/softdevice")
INCLUDE_DIRECTORIES("${NRF51822_DIR}/Include/ble/ble_services")
INCLUDE_DIRECTORIES("${NRF51822_DIR}/Include/gcc")

# Recent changes in directory structure with new SDK
INCLUDE_DIRECTORIES("${NRF51822_DIR}/Include/s110")
INCLUDE_DIRECTORIES("${NRF51822_DIR}/Include/sd_common")

INCLUDE_DIRECTORIES("${SOFTDEVICE_DIR}/include")

# Show which directories are actually included to the user
GET_PROPERTY(dirs DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
FOREACH(dir ${dirs})
	MESSAGE(STATUS "Add to the include directories: '${dir}'")
ENDFOREACH()

# Set up our main executable.
IF(FOLDER_SOURCE STREQUAL "")
	MESSAGE(FATAL_ERROR "No source code files found. Please add something")
ELSE()
	ADD_EXECUTABLE(${PROJECT_NAME} ${FOLDER_SOURCE} ${FOLDER_HEADER} ${OBJECT_FILES})
	
	# https://stackoverflow.com/questions/5278444/adding-a-custom-command-with-the-file-name-as-a-target
	ADD_CUSTOM_COMMAND(OUTPUT ${PROJECT_NAME}.tmp
		COMMAND ${CMAKE_OBJCOPY_OVERLOAD} -j .text -j .data -O binary ${PROJECT_NAME} ${PROJECT_NAME}.tmp
		COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_NAME}.tmp ${PROJECT_NAME}.bin
		COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_NAME} ${PROJECT_NAME}.elf
		COMMAND ${CMAKE_SIZE} ${PROJECT_NAME}.elf
		COMMAND ${CMAKE_COMMAND} -E remove ${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E remove ${PROJECT_NAME}.tmp
		DEPENDS ${PROJECT_NAME}
		COMMENT "Object copy ${PROJECT_NAME} to ${PROJECT_NAME}.bin")

	ADD_CUSTOM_TARGET(${PROJECT_NAME}.bin ALL DEPENDS ${PROJECT_NAME}.tmp)

	SET_DIRECTORY_PROPERTIES(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES ${PROJECT_NAME}.bin)

	TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIBS})
	INSTALL(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin)
ENDIF()

