<?xml version='1.0' encoding='utf-8'?>
<index xmlns="http://jessevdk.github.com/cldoc/1.0">
  <namespace name="BLEpp" ref="BLEpp#BLEpp">
    <class name="BatteryService" ref="BLEpp::BatteryService#BLEpp::BatteryService" />
    <class name="BLEStack" ref="BLEpp::BLEStack#BLEpp::BLEStack">
      <brief> BLEStack defines a chip-agnostic Bluetooth Low-Energy stack</brief>
    </class>
    <classtemplate name="Characteristic" ref="BLEpp::Characteristic#BLEpp::Characteristic">
      <brief> Characteristic of generic type T</brief>
      <templatetypeparameter id="BLEpp::Characteristic::T" name="T" />
    </classtemplate>
    <class name="CharacteristicBase" ref="BLEpp::CharacteristicBase#BLEpp::CharacteristicBase">
      <brief> Non-template base class for Characteristics.</brief>
    </class>
    <struct name="CharacteristicInit" ref="BLEpp::CharacteristicInit#BLEpp::CharacteristicInit" />
    <struct name="CharacteristicStatus" ref="BLEpp::CharacteristicStatus#BLEpp::CharacteristicStatus" />
    <classtemplate name="CharacteristicT" ref="BLEpp::CharacteristicT#BLEpp::CharacteristicT">
      <brief> A default characteristic</brief>
      <templatetypeparameter id="BLEpp::CharacteristicT::T" name="T" />
      <templatetypeparameter id="BLEpp::CharacteristicT::E" name="E" />
    </classtemplate>
    <class name="CharacteristicT" ref="BLEpp::CharacteristicT#BLEpp::CharacteristicT">
      <brief>A characteristic for strings</brief>
    </class>
    <class name="CharacteristicT" ref="BLEpp::CharacteristicT#BLEpp::CharacteristicT">
      <brief>A characteristic for CharacteristicValue</brief>
    </class>
    <struct name="CharacteristicValue" ref="BLEpp::CharacteristicValue#BLEpp::CharacteristicValue">
      <brief> A value which can be written to or read from a characteristic </brief>
    </struct>
    <class name="GenericService" ref="BLEpp::GenericService#BLEpp::GenericService" />
    <class name="IBeacon" ref="BLEpp::IBeacon#BLEpp::IBeacon">
      <brief> Implementation of the iBeacon specification.</brief>
    </class>
    <class name="Nrf51822BluetoothStack" ref="BLEpp::Nrf51822BluetoothStack#BLEpp::Nrf51822BluetoothStack">
      <brief> nRF51822 specific implementation of the BLEStack</brief>
    </class>
    <class name="Service" ref="BLEpp::Service#BLEpp::Service">
      <brief> Service as defined in the GATT Specification.</brief>
    </class>
    <class name="UUID" ref="BLEpp::UUID#BLEpp::UUID">
      <brief> A Universally Unique IDentifier. </brief>
    </class>
  </namespace>
  <struct name="AllocatedBuffer" ref="AllocatedBuffer#AllocatedBuffer">
    <brief>Dominik: DO NOT USE! malloc fails completely or doesn't return a correct memory on the heap!!!!</brief>
  </struct>
  <classtemplate name="fixed_tuple" ref="fixed_tuple#fixed_tuple">
    <brief> A fixed tuple is a vector with a templated type and a reserved capacity.</brief>
    <templatetypeparameter id="fixed_tuple::T" name="T" />
    <templatenontypeparameter id="fixed_tuple::capacity" name="capacity">
      <type name="uint8_t" />
    </templatenontypeparameter>
  </classtemplate>
  <class name="GeneralService" ref="GeneralService#GeneralService" />
  <struct name="ISerializable" ref="ISerializable#ISerializable" />
  <classtemplate name="tuple" ref="tuple#tuple">
    <brief> A tuple is a vector with a templated type and a public constructor.</brief>
    <templatetypeparameter id="tuple::T" name="T" />
  </classtemplate>
  <function id="SWI1_IRQHandler" name="SWI1_IRQHandler">
    <brief> Interrupt request for SoftDevice</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </function>
  <report name="Documentation generator" ref="report" />
</index>
